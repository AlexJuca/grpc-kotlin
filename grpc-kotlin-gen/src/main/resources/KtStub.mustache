{{#packageName}}
package {{packageName}}
{{/packageName}}

import {{packageName}}.{{serviceName}}Grpc.*

import io.grpc.BindableService
import io.grpc.CallOptions
import io.grpc.Channel
import io.grpc.MethodDescriptor
import io.grpc.ServerServiceDefinition
import io.grpc.Status
import io.grpc.StatusException
import io.grpc.StatusRuntimeException
import io.grpc.stub.AbstractStub
import io.grpc.stub.ServerCalls
import io.grpc.stub.StreamObserver

import kotlinx.coroutines.experimental.CompletableDeferred
import kotlinx.coroutines.experimental.CoroutineScope
import kotlinx.coroutines.experimental.Deferred
import kotlinx.coroutines.experimental.Dispatchers
import kotlinx.coroutines.experimental.GlobalScope
import kotlinx.coroutines.experimental.channels.Channel as KtChannel
import kotlinx.coroutines.experimental.channels.ReceiveChannel
import kotlinx.coroutines.experimental.channels.SendChannel
import kotlinx.coroutines.experimental.launch
import kotlin.coroutines.experimental.CoroutineContext

{{#deprecated}}@Deprecated("deprecated"){{/deprecated}}
@javax.annotation.Generated(
    value = ["by gRPC Kotlin generator"],
    comments = "Source: {{protoName}}"
)
object {{className}} {

    /**
     * Creates a new coroutine stub that supports all call types for the service
     */
    @JvmStatic
    fun newStub(channel: Channel): {{serviceName}}KtStub {
        return {{serviceName}}KtStub(channel)
    }

    class {{serviceName}}KtStub : AbstractStub<{{serviceName}}KtStub> {

        private val delegate: {{packageName}}.{{serviceName}}Grpc.{{serviceName}}Stub

        internal constructor(channel: Channel) : super(channel) {
            delegate = {{packageName}}.{{serviceName}}Grpc.newStub(channel)
        }

        internal constructor(channel: Channel, callOptions: CallOptions) : super(channel, callOptions) {
            delegate = {{packageName}}.{{serviceName}}Grpc.newStub(channel).build(channel, callOptions)
        }

        override fun build(channel: Channel, callOptions: CallOptions): {{serviceName}}KtStub {
            return {{serviceName}}KtStub(channel, callOptions)
        }

        {{#methods}}
        {{#javaDoc}}{{{javaDoc}}}{{/javaDoc}}
        {{#deprecated}}@Deprecated("deprecated"){{/deprecated}}
        {{^isManyInput}}
        {{^isManyOutput}}
        {{! == unary req, unary resp == }}
        fun {{methodName}}(request: {{inputType}}): Deferred<{{outputType}}> {
            val responseDeferred = StreamObserverDeferred<{{outputType}}>()
            delegate.{{methodName}}(request, responseDeferred)
            return responseDeferred
        }
        {{/isManyOutput}}
        {{#isManyOutput}}
        {{! == unary req, streaming resp == }}
        fun {{methodName}}(request: {{inputType}}): ReceiveChannel<{{outputType}}> {
            val responseChannel = StreamObserverChannel<{{outputType}}>()
            delegate.{{methodName}}(request, responseChannel)
            return responseChannel
        }
        {{/isManyOutput}}
        {{/isManyInput}}
        {{#isManyInput}}
        {{^isManyOutput}}
        {{! == streaming req, unary resp == }}
        fun {{methodName}}(): ManyToOneCall<{{inputType}}, {{outputType}}> {
            val responseDeferred = StreamObserverDeferred<{{outputType}}>()
            val requestObserver = delegate.{{methodName}}(responseDeferred)
            val requestChannel = KtChannel<{{inputType}}>(KtChannel.UNLIMITED)
            connectChannelToObserver(requestChannel, requestObserver)
            return ManyToOneCall(requestChannel, responseDeferred)
        }
        {{/isManyOutput}}
        {{#isManyOutput}}
        {{! == streaming req, streaming resp == }}
        fun {{methodName}}(): ManyToManyCall<{{inputType}}, {{outputType}}> {
            val responseChannel = StreamObserverChannel<{{outputType}}>()
            val requestObserver = delegate.{{methodName}}(responseChannel)
            val requestChannel = KtChannel<{{inputType}}>(KtChannel.UNLIMITED)
            connectChannelToObserver(requestChannel, requestObserver)
            return ManyToManyCall(requestChannel, responseChannel)
        }
        {{/isManyOutput}}
        {{/isManyInput}}
        {{/methods}}
    }

    {{#javaDoc}}{{{javaDoc}}}{{/javaDoc}}
    abstract class {{serviceName}}ImplBase(
        override val coroutineContext: CoroutineContext = Dispatchers.Default
    ) : BindableService, CoroutineScope {

        {{#methods}}
        {{#javaDoc}}{{{javaDoc}}}{{/javaDoc}}
        {{#deprecated}}@Deprecated("deprecated"){{/deprecated}}
        {{^isManyInput}}
        {{^isManyOutput}}
        {{! == unary req, unary resp == }}
        open fun {{methodName}}(request: {{inputType}}): Deferred<{{outputType}}> {
            throw unimplemented(get{{methodNamePascalCase}}Method()).asRuntimeException()
        }

        internal fun {{methodName}}Internal(
            request: {{inputType}},
            responseObserver: StreamObserver<{{outputType}}>
        ) {
            launch {
                tryCatchingStatus(responseObserver) {
                    val response = {{methodName}}(request)
                    responseObserver.onNext(response.await())
                    responseObserver.onCompleted()
                }
            }
        }
        {{/isManyOutput}}
        {{#isManyOutput}}
        {{! == unary req, streaming resp == }}
        open fun {{methodName}}(request: {{inputType}}): ReceiveChannel<{{outputType}}> {
            throw unimplemented(get{{methodNamePascalCase}}Method()).asRuntimeException()
        }

        internal fun {{methodName}}Internal(
            request: {{inputType}},
            responseObserver: StreamObserver<{{outputType}}>
        ) {
            launch {
                tryCatchingStatus(responseObserver) {
                    for (value in {{methodName}}(request)) {
                        responseObserver.onNext(value)
                    }
                    responseObserver.onCompleted()
                }
            }
        }
        {{/isManyOutput}}
        {{/isManyInput}}
        {{#isManyInput}}
        {{^isManyOutput}}
        {{! == streaming req, unary resp == }}
        open fun {{methodName}}(requestChannel: ReceiveChannel<{{inputType}}>): Deferred<{{outputType}}> {
            throw unimplemented(get{{methodNamePascalCase}}Method()).asRuntimeException()
        }

        internal fun {{methodName}}Internal(
            responseObserver: StreamObserver<{{outputType}}>
        ): StreamObserver<{{inputType}}> {
            val requestChannel = StreamObserverChannel<{{inputType}}>()
            launch {
                tryCatchingStatus(responseObserver) {
                    val response = {{methodName}}(requestChannel)
                    responseObserver.onNext(response.await())
                    responseObserver.onCompleted()
                }
            }
            return requestChannel
        }
        {{/isManyOutput}}
        {{#isManyOutput}}
        {{! == streaming req, streaming resp == }}
        open fun {{methodName}}(requestChannel: ReceiveChannel<{{inputType}}>): ReceiveChannel<{{outputType}}> {
            throw unimplemented(get{{methodNamePascalCase}}Method()).asRuntimeException()
        }

        internal fun {{methodName}}Internal(
            responseObserver: StreamObserver<{{outputType}}>
        ): StreamObserver<{{inputType}}> {
            val requestChannel = StreamObserverChannel<{{inputType}}>()
            launch {
                tryCatchingStatus(responseObserver) {
                    for (value in {{methodName}}(requestChannel)) {
                        responseObserver.onNext(value)
                    }
                    responseObserver.onCompleted()
                }
            }
            return requestChannel
        }
        {{/isManyOutput}}
        {{/isManyInput}}
        {{/methods}}

        override fun bindService(): ServerServiceDefinition {
            return ServerServiceDefinition.builder(getServiceDescriptor())
                {{#methods}}
                .addMethod(
                    get{{methodNamePascalCase}}Method(),
                    ServerCalls.{{grpcCallsMethodName}}(
                        MethodHandlers(this, METHODID_{{methodNameUpperUnderscore}})
                    )
                )
                {{/methods}}
                .build()
        }
    }

    private fun unimplemented(methodDescriptor: MethodDescriptor<*, *>): Status {
        return Status.UNIMPLEMENTED
            .withDescription(
                String.format(
                    "Method %s is unimplemented",
                    methodDescriptor.fullMethodName
                )
            )
    }

    private suspend fun tryCatchingStatus(responseObserver: StreamObserver<*>, body: suspend () -> Unit) {
        try {
            body()
        } catch (t: StatusException) {
            responseObserver.onError(t)
        } catch (t: StatusRuntimeException) {
            responseObserver.onError(t)
        } catch (t: RuntimeException) {
            responseObserver.onError(Status.UNKNOWN.asRuntimeException())
            throw t
        } catch (t: Exception) {
            responseObserver.onError(Status.UNKNOWN.asException())
            throw t
        } catch (t: Throwable) {
            responseObserver.onError(Status.INTERNAL.asException())
            throw t
        }
    }

    private fun <E> connectChannelToObserver(channel: ReceiveChannel<E>, observer: StreamObserver<E>) {
        // todo: specify coroutine context
        GlobalScope.launch {
            try {
                for (value in channel) {
                    observer.onNext(value)
                }
                observer.onCompleted()
            } catch (t: Throwable) {
                observer.onError(t)
            }
        }
    }

    private fun <E> connectDeferredToObserver(deferred: Deferred<E>, observer: StreamObserver<E>) {
        // todo: specify coroutine context
        GlobalScope.launch {
            try {
                observer.onNext(deferred.await())
                observer.onCompleted()
            } catch (t: Throwable) {
                observer.onError(t)
            }
        }
    }

    class ManyToOneCall<in TRequest, out TResponse>(
        private val request: SendChannel<TRequest>,
        private val response: Deferred<TResponse>
    ) : SendChannel<TRequest> by request,
        Deferred<TResponse> by response

    class ManyToManyCall<in TRequest, out TResponse>(
        private val request: SendChannel<TRequest>,
        private val response: ReceiveChannel<TResponse>
    ) : SendChannel<TRequest> by request,
        ReceiveChannel<TResponse> by response

    private class StreamObserverDeferred<E>
        : StreamObserver<E>, CompletableDeferred<E> by CompletableDeferred() {

        override fun onNext(value: E) { complete(value) }
        override fun onError(t: Throwable) { cancel(t) }
        override fun onCompleted() { /* nothing */ }
    }

    private class StreamObserverChannel<E>
        : StreamObserver<E>, KtChannel<E> by KtChannel<E>(KtChannel.UNLIMITED) {

        override fun onNext(value: E) { offer(value) }
        override fun onError(t: Throwable?) { close(cause = t) }
        override fun onCompleted() { close(cause = null) }
    }

    {{#methods}}
    val METHODID_{{methodNameUpperUnderscore}} = {{methodNumber}}
    {{/methods}}

    private class MethodHandlers<Req, Resp> internal constructor(
        private val serviceImpl: {{serviceName}}ImplBase,
        private val methodId: Int
    ) : ServerCalls.UnaryMethod<Req, Resp>,
        ServerCalls.ServerStreamingMethod<Req, Resp>,
        ServerCalls.ClientStreamingMethod<Req, Resp>,
        ServerCalls.BidiStreamingMethod<Req, Resp> {

        @Suppress("UNCHECKED_CAST")
        override fun invoke(request: Req, responseObserver: StreamObserver<Resp>) {
            when (methodId) {
                {{#methods}}
                {{^isManyInput}}
                METHODID_{{methodNameUpperUnderscore}} ->
                    serviceImpl.{{methodName}}Internal(
                        request as {{inputType}},
                        responseObserver as StreamObserver<{{outputType}}>
                    )
                {{/isManyInput}}
                {{/methods}}
                else -> throw AssertionError()
            }
        }

        @Suppress("UNCHECKED_CAST")
        override fun invoke(responseObserver: StreamObserver<Resp>): StreamObserver<Req> {
            return when (methodId) {
                {{#methods}}
                {{#isManyInput}}
                METHODID_{{methodNameUpperUnderscore}} ->
                    serviceImpl.{{methodName}}Internal(
                        responseObserver as StreamObserver<{{outputType}}>
                    ) as StreamObserver<Req>
                {{/isManyInput}}
                {{/methods}}
                else -> throw AssertionError()
            }
        }
    }
}
